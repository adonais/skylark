snippet class "class ..."
class ${1:my_class} {
public: 
    $1($2){$3}
    ~$1($4){$5}
protected:
    $6
private:
    $0
};
endsnippet

snippet def "#define ..."
#define $0
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1:SYMBOL}
#define $1 ${0:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
$0
#endif
endsnippet

snippet enum "enum ..."
enum ${1:enum_var} {
    $0,
};
endsnippet

snippet mark "#pragma mark (mark)" Ab
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)" b
int main(int argc, char *argv[]) {
    $0
    return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
    $0
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
    $0
}
endsnippet

snippet forv "Vector For Loop"
for (std::vector<$1>::iterator ${3:i} = $2.begin(); $3 != $2.end(); ++$3) {
    $0
}
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n", $0);
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}($3) {
    $0
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}($3);
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet printf "printf ..."
printf("${1:%s}\n", $0);
endsnippet

snippet rd "Read File Into Vector"
std::vector<char> v;
FILE *${1:fp} = nullptr;
if (($1 = fopen("${2:filename}", "${3:r}"))) {
    char buf[1024];
    while (size_t len = fread(buf, 1, sizeof(buf), $1)) {
        v.insert(v.end(), buf, buf + len);
    }
    fclose($1);
}
$0
endsnippet

snippet switch "switch ..." A
switch (${1:expression}) {
    $0
    default:
        break;
}
endsnippet

snippet try "try ..."
try {
    $1
}
catch (const std::exception&)
{
    $0
}
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet typedef "typedef ..."
typedef ${1:int} ${2:MyCustomType};
$0
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet while "while ..."
while (${1:true}) {
    $0;
}
endsnippet
